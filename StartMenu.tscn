[gd_scene load_steps=20 format=2]

[ext_resource path="res://StartMenu.gd" type="Script" id=1]
[ext_resource path="res://gui/play.png" type="Texture" id=2]
[ext_resource path="res://gui/close.png" type="Texture" id=3]
[ext_resource path="res://gamescrenns/about.png" type="Texture" id=4]
[ext_resource path="res://gui/prize.png" type="Texture" id=5]
[ext_resource path="res://gui/ab.png" type="Texture" id=6]
[ext_resource path="res://gui fairy/bg.png" type="Texture" id=7]
[ext_resource path="res://gui fairy/Main2.png" type="Texture" id=8]
[ext_resource path="res://gui/aaa.png" type="Texture" id=9]
[ext_resource path="res://icon.png" type="Texture" id=10]
[ext_resource path="res://audio/Netherplace_Looping.ogg" type="AudioStream" id=11]
[ext_resource path="res://stardate_81316.ttf" type="DynamicFontData" id=12]
[ext_resource path="res://leader.png" type="Texture" id=13]

[sub_resource type="Shader" id=1]
code = "
shader_type canvas_item;

// Gonkee's smoke shader for Godot 3 - full tutorial https://youtu.be/ZkeRKXCoJNo
// If you use this shader, I would prefer it if you gave credit to me and my channel

uniform vec2 center = vec2(0.5, 0.8);

uniform int OCTAVES = 6;

float rand(vec2 coord){
	return fract(sin(dot(coord, vec2(12.9898, 78.233)))* 43758.5453123);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	// 4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord){
	float value = 0.0;
	float scale = 0.5;

	for(int i = 0; i < OCTAVES; i++){
		value += noise(coord) * scale;
		coord *= 2.0;
		scale *= 0.5;
	}
	return value;
}

float egg_shape(vec2 coord, float radius){
	vec2 diff = abs(coord - center);

	if (coord.y < center.y){
		diff.y /= 2.0;
	} else {
		diff.y *= 2.0;
	}

	float dist = sqrt(diff.x * diff.x + diff.y * diff.y) / radius;
	float value = clamp(1.0 - dist, 0.0, 1.0);
	return clamp(value * value, 0.0, 1.0);
}

void fragment() {
	vec2 scaled_coord = UV * 6.0;
	
	float warp = UV.y;
	float dist_from_center = abs(UV.x - 0.5) * 4.0;
	if (UV.x > 0.5) {
		warp = 1.0 - warp;
	}
	
	vec2 warp_vec = vec2(warp, 0.0);
	float motion_fbm = fbm(scaled_coord + vec2(TIME * 0.4, TIME * 1.3)); // used for distorting the smoke_fbm texture
	float smoke_fbm = fbm(scaled_coord + vec2(0.0, TIME * 1.0) + motion_fbm + warp_vec * dist_from_center);
	
	float egg_s = egg_shape(UV, 0.5);
	
	float thres = 0.1;
	smoke_fbm *= egg_s;
	smoke_fbm = clamp(smoke_fbm - thres, 0.0, 1.0) / (1.0 - thres);
	if (smoke_fbm < 0.1) {
		smoke_fbm *= smoke_fbm/0.1;
	}
	smoke_fbm /= egg_s;
	smoke_fbm = sqrt(smoke_fbm);
	smoke_fbm = clamp(smoke_fbm, 0.0, 1.0);
	
	COLOR = vec4(smoke_fbm);
//	COLOR = vec4(vec3(egg_s), 1.0);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/center = Vector2( 0.5, 0.8 )
shader_param/OCTAVES = 6

[sub_resource type="Shader" id=3]
code = "
shader_type canvas_item;

// Gonkee's fire shader for Godot 3 - full tutorial https://youtu.be/CI3JZ-3cabg
// If you use this shader, I would prefer it if you gave credit to me and my channel

uniform vec4 transparent : hint_color;
uniform vec4 inner : hint_color;
uniform vec4 outer : hint_color;

uniform float inner_threshold = 0.4;
uniform float outer_threshold = 0.15;
uniform float soft_edge = 0.04;

uniform vec2 center = vec2(0.5, 0.8);

uniform int OCTAVES = 6;

float rand(vec2 coord){
	return fract(sin(dot(coord, vec2(12.9898, 78.233)))* 43758.5453123);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	// 4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord){
	float value = 0.0;
	float scale = 0.5;

	for(int i = 0; i < OCTAVES; i++){
		value += noise(coord) * scale;
		coord *= 2.0;
		scale *= 0.5;
	}
	return value;
}

float overlay(float base, float top) {
	if (base < 0.5) {
		return 2.0 * base * top;
	} else {
		return 1.0 - 2.0 * (1.0 - base) * (1.0 - top);
	}
}

float egg_shape(vec2 coord, float radius){
	vec2 diff = abs(coord - center);

	if (coord.y < center.y){
		diff.y /= 2.0;
	} else {
		diff.y *= 2.0;
	}

	float dist = sqrt(diff.x * diff.x + diff.y * diff.y) / radius;
	float value = sqrt(1.0 - dist * dist);
	return clamp(value, 0.0, 1.0);
}

void fragment() {
	vec2 coord = UV * 8.0;
	vec2 fbmcoord = coord / 6.0;

	float egg_s = egg_shape(UV, 0.4);
	egg_s += egg_shape(UV, 0.2) / 2.0;

	float noise1 = noise(coord + vec2(TIME * 0.25, TIME * 4.0));
	float noise2 = noise(coord + vec2(TIME * 0.5, TIME * 7.0));
	float combined_noise = (noise1 + noise2) / 2.0;

	float fbm_noise = fbm(fbmcoord + vec2(0.0, TIME * 3.0));
	fbm_noise = overlay(fbm_noise, UV.y);

	float everything_combined = combined_noise * fbm_noise * egg_s;

	if (everything_combined < outer_threshold){
		COLOR = transparent;
	} else if (everything_combined < outer_threshold + soft_edge){
		COLOR = mix(transparent, outer, (everything_combined - outer_threshold) / soft_edge);
	} else if (everything_combined < inner_threshold){
		COLOR = outer;
	} else if (everything_combined < inner_threshold + soft_edge){
		COLOR = mix(outer, inner, (everything_combined - inner_threshold) / soft_edge);
	} else {
		COLOR = inner;
	}

	//COLOR = vec4(vec3(everything_combined), 1.0);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/transparent = Color( 0, 0, 0, 0 )
shader_param/inner = Color( 0.815686, 0.788235, 0.109804, 0.270588 )
shader_param/outer = Color( 1, 0.0627451, 0.0627451, 0.313726 )
shader_param/inner_threshold = 0.4
shader_param/outer_threshold = 0.15
shader_param/soft_edge = 0.04
shader_param/center = Vector2( 0.5, 0.8 )
shader_param/OCTAVES = 6

[sub_resource type="DynamicFont" id=5]
size = 30
outline_color = Color( 0.905882, 0.14902, 0.14902, 1 )
font_data = ExtResource( 12 )

[sub_resource type="DynamicFont" id=6]
size = 25
font_data = ExtResource( 12 )

[node name="StartMenu" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -6.1217
margin_top = 2.04065
margin_right = -6.1217
margin_bottom = 2.04065
script = ExtResource( 1 )

[node name="Button" type="Button" parent="."]
anchor_top = 1.0
anchor_bottom = 1.0
margin_left = 444.351
margin_top = -373.704
margin_right = 697.351
margin_bottom = -67.7038
rect_scale = Vector2( 0.5, 0.5 )
flat = true

[node name="play" type="Sprite" parent="Button"]
position = Vector2( 149.689, 157.049 )
scale = Vector2( 0.704978, 0.689834 )
texture = ExtResource( 2 )

[node name="quit" type="Button" parent="."]
margin_left = 6.65198
margin_top = 462.268
margin_right = 123.652
margin_bottom = 584.268
flat = true

[node name="close" type="Sprite" parent="quit"]
position = Vector2( 55.4339, 59.3483 )
scale = Vector2( 0.550354, 0.56872 )
texture = ExtResource( 3 )

[node name="Button3" type="Button" parent="."]
margin_left = 10.2028
margin_top = 8.16223
margin_right = 85.2028
margin_bottom = 82.1622
flat = true

[node name="about" type="Sprite" parent="Button3"]
position = Vector2( 43.2375, 50.2187 )
scale = Vector2( 0.323318, 0.335785 )
texture = ExtResource( 4 )

[node name="Button4" type="Button" parent="."]
margin_left = 926.375
margin_top = 8.38273
margin_right = 1015.37
margin_bottom = 89.3827
flat = true

[node name="prize" type="Sprite" parent="Button4"]
position = Vector2( 37.8712, 50.0243 )
scale = Vector2( 0.566815, 0.495215 )
texture = ExtResource( 5 )

[node name="ab" type="Sprite" parent="."]
modulate = Color( 0.992157, 0.00784314, 0.00784314, 1 )
self_modulate = Color( 1, 0, 0, 1 )
position = Vector2( 520.994, 153.37 )
texture = ExtResource( 6 )

[node name="bg2" type="Sprite" parent="."]
position = Vector2( 490.527, 311.447 )
scale = Vector2( 0.283872, 0.314771 )
z_index = -2
texture = ExtResource( 7 )

[node name="Main2" type="Sprite" parent="bg2"]
position = Vector2( -94.1845, -83.0566 )
z_index = 1
texture = ExtResource( 8 )

[node name="aaa" type="Sprite" parent="."]
position = Vector2( 514.359, 157.359 )
texture = ExtResource( 9 )

[node name="icon" type="Sprite" parent="."]
material = SubResource( 2 )
position = Vector2( 823.208, 257.361 )
scale = Vector2( 11.6766, 14.9828 )
z_index = -2
texture = ExtResource( 10 )

[node name="icon2" type="Sprite" parent="."]
material = SubResource( 2 )
position = Vector2( 148.775, 223.53 )
scale = Vector2( 11.6766, 14.9828 )
z_index = -2
texture = ExtResource( 10 )

[node name="icon3" type="Sprite" parent="."]
material = SubResource( 2 )
position = Vector2( 506.968, 221.832 )
scale = Vector2( 11.6766, 14.9828 )
z_index = -2
texture = ExtResource( 10 )
flip_h = true

[node name="icon4" type="Sprite" parent="."]
self_modulate = Color( 1, 1, 1, 0.521569 )
material = SubResource( 4 )
position = Vector2( 142.705, 260.214 )
scale = Vector2( 10.6555, 12.7993 )
z_index = -2
texture = ExtResource( 10 )

[node name="icon6" type="Sprite" parent="."]
self_modulate = Color( 1, 1, 1, 0.403922 )
material = SubResource( 4 )
position = Vector2( 501.161, 228.877 )
scale = Vector2( 10.6555, 12.7993 )
z_index = -2
texture = ExtResource( 10 )
flip_h = true

[node name="icon7" type="Sprite" parent="."]
self_modulate = Color( 1, 1, 1, 0.411765 )
material = SubResource( 4 )
position = Vector2( 868.887, 251.633 )
scale = Vector2( 10.6555, 12.7993 )
z_index = -2
texture = ExtResource( 10 )

[node name="AudioStreamPlayer2D2" type="AudioStreamPlayer2D" parent="."]
position = Vector2( -1.89075, -2.83614 )
stream = ExtResource( 11 )
autoplay = true

[node name="Label" type="Label" parent="."]
margin_left = 779.556
margin_top = 185.0
margin_right = 861.556
margin_bottom = 215.0
custom_fonts/font = SubResource( 5 )
custom_colors/font_color = Color( 0.490196, 0.776471, 0.27451, 1 )
text = "ALPHA"

[node name="Label2" type="Label" parent="."]
margin_left = 440.502
margin_top = 13.6859
margin_right = 645.502
margin_bottom = 39.6859
custom_fonts/font = SubResource( 6 )
custom_colors/font_color = Color( 0.0627451, 0.184314, 0.6, 1 )
text = "@copyright 2019 chinuon "

[node name="leader" type="Sprite" parent="."]
position = Vector2( 969.716, 520.088 )
scale = Vector2( 0.523232, 0.534941 )
texture = ExtResource( 13 )

[node name="level" type="Button" parent="leader"]
self_modulate = Color( 1, 1, 1, 0.0627451 )
margin_left = -62.0
margin_top = -76.0
margin_right = 63.0
margin_bottom = 54.0
[connection signal="pressed" from="Button" to="." method="_on_Button_pressed"]
[connection signal="pressed" from="quit" to="." method="_on_quit_pressed"]
[connection signal="pressed" from="Button3" to="." method="_on_Button3_pressed"]
[connection signal="pressed" from="Button4" to="." method="_on_Button4_pressed"]
[connection signal="pressed" from="leader/level" to="." method="_on_level_pressed"]
